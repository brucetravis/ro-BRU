import React, { useState } from 'react'
import './ProductsUpload.css'
import { getDownloadURL, ref, uploadBytes } from 'firebase/storage'
import { storage } from '../../components/configs/firebase/Firebase'
import { v4 } from 'uuid'
import { addDoc, doc, getFirestore } from 'firebase/firestore'
// import { storage } from '../../components/configs/firebase/Firebase'
// create app and db to use It to create a collection
// import { app, db } from '../../components/configs/firebase/Firebase'

export default function ProductsUpload() {

    // state to handle category change
    const [ selectedCategory, setSelectedCategory ] = useState("") // strings for a more flexible approach

    // An array of the possible categories to be selected
    const categories = [ "clothes", "shoes", "accessories", "bags"]

    // Function to handle the category change
    const handleCategoryChange = (e) => {

        // // Check If the selected value matches any of the categories in the array
        // if (categories.includes(e.target.value.toLowerCase())) {
        //     // Update the state of the category change
            setSelectedCategory(e.target.value.toLowerCase())
        // } else {
        //     // Display an alert if the value is not in the available categories
        //     alert("That is not in the available categories")
        // }
        
    }

    // states to handle the product Upload
    const [ name, setName ] = useState("")
    const [ vendor, setVendor ] = useState("")
    const [ price, setPrice ] = useState("")
    const [ discountPrice, setDiscountPrice ] = useState("")
    const [ color, setColor ] = useState("")
    const [ description, setDescription ] = useState("")
    const [ quantity, setQuantity ] = useState("")
    const [ imageUpload, setImageUpload ] = useState(null)
    const [ imageURL, setImageURL ] = useState("")
    const [ message, setMessage ] = useState("")
    const [ messageColor, setMessageColor ] = useState("")
    const [ isFinalPrice, setIsFinalPrice ] = useState('')
    const [ selectedSizes, setSelectedSizes ] = useState([])

    // Handle the product image Upload
    const handleImageUpload = async () => {
        if (!imageUpload) return null // If no image was selected return null/nothing/no value
        // Track the image using (ref)
        const imageRef = ref(storage, `products/${imageUpload.name + v4()}`) //v4 is a random unique ID to avoid clashes
        // Wait for the image to upload using await which can only be used with async
        const snapShot = await uploadBytes(imageRef, imageUpload)
        const url = await getDownloadURL(snapShot.ref)
        setImageURL(url)
        return url
    }

    // function to handle the price change
    const handlePriceChange = (e) => {
        // Update the price
        setPrice(e.target.value)
        // Update the price
        updatePrice(e.target.value, discountPrice)
    }

    // function to handle the discount change
    const handleDiscountChange = (e) => {
        // Update the discount
        setDiscountPrice(e.target.value)
        // Update the discount price
        updatePrice(price, e.target.value)
    }

    // function to update the final price
    const updatePrice = (price, discountPrice) => {
        // Take the original price
        const originalPrice = parseFloat(price)
        // Take the discount
        const discountedPrice = parseFloat(discountPrice)

        if (!isNaN(originalPrice) && !isNaN(discountedPrice)) {
            // Final Price
            const finalPrice = originalPrice - discountedPrice
            // Update the final Price
            setIsFinalPrice(finalPrice >= 0 ? finalPrice.toFixed(2) : "0.00") // prevent Negative values
        } else {
            setIsFinalPrice('') // else, final price is an empty string
        }
        
    }

    // function to handle the chackbox
    const handleCheckBox = (e) => {
        // get the value from the array
        const value = e.target.value
        // Function to Update the state
        setSelectedSizes((prev) => 
            prev.includes(value)
            ? prev.filter((size) => size !== value) // Only keep the size If It's not value (unchecking the box)
            : [ ...prev, value] // If the value does not exist, add it (checking the box)
        )
    }

    // Create an instance of firestore
    const firestore = getFirestore()
    

    // Function to handle submission of the form
    const handleSubmit = async (e) => {
        // Prevent the web page from handling the submission  so that you can handle It yourself
        e.preventDefault()
        
        // store the image Upload in a variable
        const uploadedImageURL = await handleImageUpload() // wait for the image uploading process to finish

        const productData = {
            name: name,
            vendor,
            price: isFinalPrice,
            discountPrice: discountPrice,
            originalPrice: price,
            description,
            color,
            quantity,
            size: selectedSizes,
            imageURL: uploadedImageURL
        }

        try {
            // Create reference path to the collection you want to send the products to in firestore
            const productsCollectionRef = doc(firestore, 'products')

            // Use addDoc to create a unique Id for firestore's products
            await addDoc(productsCollectionRef, productData)

            console.log("Product ready to be sent to Firestore:", productData)
            // Update the message variable
            setMessage("Product sent to Firestore")
            setMessageColor("green")

            // Clear the message after some time
            setTimeout(() => {
                setMessage('')
            }, 2000) // clear the message after 2 seconds
        } catch (error) {
            console.error("Error adding Product.")
            setMessage("Error adding Product.")
            setMessageColor("red")

            // clear the message after 2 seconds
            setTimeout(() => {
                setMessage('')
            }, 2000) //clear the message after 2 seconds
        }
    }


  return (
    <section className='upload-section d-flex align-items-center justify-content-center'>
        <div className=''>
            <h2>Ro&BRU</h2>
            <p className='upload-page-motto'>Styling Your Elegance</p>
            <h3>Steps to sell a Product</h3>
            <div>
                <div>
                    <p>1. Enter a product according to the available categories</p>
                    <ul>
                        {categories.map((category, index) => (
                            <li key={index}>{category}</li>
                        ))}
                    </ul>
                </div>
                <p>2. Enter a product Your choice</p>
                <p>3. Include a vendor or vendor Store</p>
                <p>4. Enter the product price and discount If any </p>
                <p>5. Enter the product color</p>
                <p>6. Enter the product size</p>
                <p>7. Enter the product description</p>
                <p>8. Include the product Image</p>
            </div>
            <p>&copy; 2025 Ro&BRU. All rights Reserved</p>
        </div>
        <div className='filling-form'>
            <form className='upload-form' onSubmit={handleSubmit}>
                <h2 className='mb-4 fs-3'>Upload Product</h2>
                
                <input 
                    type='text'
                    placeholder='Product Category'
                    className='form-control mb-2'
                    value={selectedCategory}
                    onChange={handleCategoryChange}
                    required
                />
                
                <input 
                    type='text'
                    placeholder='name'
                    className='form-control mb-2'
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                />

                <input 
                    type='text'
                    placeholder='Vendor'
                    className='form-control mb-2'
                    value={vendor}
                    onChange={(e) => setVendor(e.target.value)}
                    required
                />

                <input 
                    type='number'
                    placeholder='price'
                    className='form-control mb-3'
                    value={price}
                    onChange={handlePriceChange}
                    required
                />

                <input 
                    type='number'
                    placeholder='dicount (if any)'
                    className='form-control mb-3'
                    value={discountPrice}
                    onChange={handleDiscountChange}
                />

                {isFinalPrice && 
                    <input 
                        type='number'
                        placeholder='final Price'
                        className='form-control mb-3'
                        value={isFinalPrice}
                        readOnly
                    />
                }

                <input 
                    type='text'
                    placeholder='color'
                    className='form-control mb-3'
                    value={color}
                    onChange={(e) => setColor(e.target.value)}
                />
                

                <textarea 
                    placeholder='Description'
                    className='form-control mb-3'
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    required        
                />

                <input 
                    type='number'
                    placeholder='Quantity'
                    className='form-control mb-3'
                    value={quantity}
                    onChange={(e) => setQuantity(e.target.value)}
                    required
                />

                {/* Available Sizes for clothes */}
                {selectedCategory === categories[0] && (
                    <div className='mb-3 d-flex'>
                        <label className='form-label me-1'>Available sizes: </label>
                        <div className='form-check form-check-inline'>
                            <input 
                                className='form-check-input' 
                                type='checkbox' 
                                value='S'
                                checked={setSelectedSizes.includes('S')}
                                onChange={handleCheckBox}
                            />
                            <label className='form-check-label' htmlFor='sizeS'>S</label>
                        </div>
                        <div className='form-check form-check-inline'>
                            <input 
                                className='form-check-input' 
                                type='checkbox' 
                                value='M'
                                checked={setSelectedSizes.includes('M')}
                                onChange={handleCheckBox}
                            />
                            <label className='form-check-label' htmlFor='sizeS'>M</label>
                        </div>
                        <div className='form-check form-check-inline'>
                            <input 
                                className='form-check-input' 
                                type='checkbox' 
                                value='L'
                                checked={setSelectedSizes.includes('L')}
                                onChange={handleCheckBox}
                            />
                            <label className='form-check-label' htmlFor='sizeS'>L</label>
                        </div>
                        <div className='form-check form-check-inline'>
                            <input 
                                className='form-check-input' 
                                type='checkbox' 
                                value='XL'
                                checked={setSelectedSizes.includes('XL')}
                                onChange={handleCheckBox} 
                            />
                            <label className='form-check-label' htmlFor='sizeS'>XL</label>
                        </div>
                    </div>
                )}
                
                {/* Available sizes for shoes */}
                {selectedCategory === categories[1] && (
                    <input 
                        type='number'
                        placeholder='shoe size'
                        className='form-control mb-3'
                        required
                    />
                )}
                
                <input 
                    type='file'
                    className='form-control mb-3'
                    onChange={(e) => setImageUpload(e.target.files[0])}
                    required
                />

                {selectedCategory && (
                    <button
                        type='submit'
                        className='btn text-white px-4 py-2 rounded'
                        disabled={!selectedCategory} // Option 2 for If the initial state is empty("") button disabled can work without this
                    >
                        Upload Product
                    </button>
                )}
            </form>
            {message && 
                <div
                    className='message position-fixed bottom-0 start-0 end-0 text-center text-white p-1'
                    style={{
                    zIndex: 9999,
                    backgroundColor: messageColor
                    }}
                >
                    {message}
                </div>
            }
        </div>
    </section>
  )
}
